import pandas as pd       
train = pd.read_csv("labeledTrainData.tsv", header=0, delimiter="\t", quoting=3)

from bs4 import BeautifulSoup as bs
import re
import nltk 
from nltk.corpus import stopwords

def review_to_words (raw_review):
    #0 - import stuff 
    from bs4 import BeautifulSoup as bs
    import re
    import nltk 
    from nltk.corpus import stopwords
    #1 - remove html
    htmlless = bs(raw_review, "html.parser").get_text()
    #2 - remove non-letters
    letters = re.sub("[^a-zA-Z]", " ", htmlless)
    #3 - convert to lowercase and split
    lista = letters.lower().split()
    #4 - sets are faster than lists, so switch
    stops = set(stopwords.words("english"))
    #5 - remove stop words
    meaningful_words = [w for w in lista if not w in stops]
    #6 - join words into a string separated by a space
    return (" ".join(meaningful_words))

# Test Function
#clean_review = review_to_words(train["review"][0])
#print clean_review

num_reviews = train["review"].size
clean_train_reviews = []

for i in xrange(0,num_reviews):
    clean_train_reviews.append(review_to_words(train["review"][i]))


from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer(analyzer = "word", tokenizer = None,
                             preprocessor = None, stop_words = None, max_features = 5000)

train_data_features = vectorizer.fit_transform(clean_train_reviews)
train_data_features = train_data_features.toarray()

vocab = vectorizer.get_feature_names()
print vocab

import numpy as np

dist = np.sum(train_data_features, axis=0)

for tag, count in zip(vocab, dist):
    print count, tag

from sklearn.ensemble import RandomForestClassifier

forest = RandomForestClassifier(n_estimators = 100)

forest.fit(train_data_features, train["sentiment"])


# Read the test data
test = pd.read_csv("testData.tsv", header=0, delimiter="\t", \
                   quoting=3 )

# Verify that there are 25,000 rows and 2 columns
print test.shape

# Create an empty list and append the clean reviews one by one
num_reviews = len(test["review"])
clean_test_reviews = [] 

print "Cleaning and parsing the test set movie reviews...\n"
for i in xrange(0,num_reviews):
    if( (i+1) % 1000 == 0 ):
        print "Review %d of %d\n" % (i+1, num_reviews)
    clean_review = review_to_words( test["review"][i] )
    clean_test_reviews.append( clean_review )

# Get a bag of words for the test set, and convert to a numpy array
test_data_features = vectorizer.transform(clean_test_reviews)
test_data_features = test_data_features.toarray()

# Use the random forest to make sentiment label predictions
result = forest.predict(test_data_features)

# Copy the results to a pandas dataframe with an "id" column and
# a "sentiment" column
output = pd.DataFrame( data={"id":test["id"], "sentiment":result} )

# Use pandas to write the comma-separated output file
output.to_csv( "Bag_of_Words_model.csv", index=False, quoting=3 )
